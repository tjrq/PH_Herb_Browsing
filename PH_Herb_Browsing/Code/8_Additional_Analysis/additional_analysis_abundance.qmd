---
title: "Untitled"
format: html
editor: visual
---

# Libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse)
#library(rstanarm)
library(brms)
library(coda)
library(bayesplot)
library(DHARMa)
library(emmeans)
library(broom)
library(tidybayes)
library(ggeffects)
library(broom.mixed)
library(bayestestR)
library(see)
library(easystats)
library(patchwork)
library(ggridges)
source("helperFunctions.R")
library(ggimage)
library(vegan)
library(BiodiversityR)
library(ggrepel)
set.seed(123)
```

# read data

```{r}
brow_abun <- read_csv("Data/abundance_MaxN.csv",
               trim_ws = TRUE)
```

# prepare database

```{r}
brow_abun_v2 <- 
  brow_abun |> 
  select(Site,
         Depth_band,
         Species,
         Functional_group,
         MaxN) |> 
  filter(Functional_group == "Browser" | 
         Functional_group == "None") |> 
  mutate(Site = factor(Site),
         Depth_band = as.character(Depth_band)) |> 
  mutate(Depth_band = recode(Depth_band,
                             "10" = "10m",
                             "20" = "20m",
                             "30" = "30m",
                             "50" = "50m"))
```

# Analysis: partitioned per depth

## prepare database

```{r}
#30m
brow_abun_30m <-
brow_abun_v2 |> 
  filter(Depth_band != "50m")

#50m
brow_abun_50m <-
brow_abun_v2 |> 
  filter(Site == "Arnedo" |
           Site == "Lucero")
```

# 30m

## formula

```{r}
abun_form_30m <- bf(MaxN ~ Depth_band +
                  (1 | Site),
                family = negbinomial(link = "log"))
```

## view data

```{r}
brow_abun_30m |> 
  group_by(Depth_band,
           Site) |> 
  summarise(median = median(MaxN),
            mad = mad(MaxN))
```

## weakly informative priors

```{r}
abun30m_prior <- prior(normal(1, 1.5), class = "Intercept") +
  prior(normal(0, 1.5), class = "b") +
  prior(student_t(3, 0, 1.5), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape")
```

## prior model

```{r}
#| cache: true
abun30m_prior_mod <- brm(abun_form_30m,
                    data = brow_abun_30m,
                    prior = abun30m_prior,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    seed = 123,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

## evaluate prior model

```{r}
abun30m_prior_mod |> conditional_effects() |> 
  plot(points = TRUE,
       ask = FALSE,
       plot = FALSE) |> 
  wrap_plots() &
  scale_y_log10()
```

## fit data to model

```{r}
#| cache: true
abun30m_mod <- update(abun30m_prior_mod ,
                  sample_prior = "yes",
                    iter = 10000,
                    warmup = 2000,
                    refresh = 2000)
```

### chain checks

```{r}
# trace
abun30m_mod |> mcmc_plot(type = "trace")
# autocor
abun30m_mod |> mcmc_plot(type = "acf_bar")
# rhat
abun30m_mod |> mcmc_plot(type = "rhat_hist")
# ess
abun30m_mod |> mcmc_plot(type = "neff_hist")
```

### residuals checks

```{r}
# resids
abun30m_resids <- make_brms_dharma_res(abun30m_mod)
# qqplot
abun30m_resids |> testUniformity()
# resid plot
abun30m_resids |> plotResiduals() 
# dispersion
abun30m_resids |> testDispersion()
```

#### save model

```{r}
save(abun30m_mod, file = "Model_Outputs/abun30m_mod.Rdata")
```

# 50m

## formula

```{r}
abun_form_50m <- bf(MaxN ~ Depth_band +
                  (1 | Site),
                family = negbinomial(link = "log"))
```

## view data

```{r}
brow_abun_50m |> 
  group_by(Depth_band,
           Site) |> 
  summarise(median = median(MaxN),
            mad = mad(MaxN))
```

## weakly informative priors

```{r}
abun50m_prior <- prior(normal(1, 1.5), class = "Intercept") +
  prior(normal(0, 1.5), class = "b") +
  prior(student_t(3, 0, 1.5), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape")
```

## prior model

```{r}
#| cache: true
abun50m_prior_mod <- brm(abun_form_50m,
                    data = brow_abun_50m,
                    prior = abun50m_prior,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    seed = 123,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

## evaluate prior model

```{r}
abun50m_prior_mod |> conditional_effects() |> 
  plot(points = TRUE,
       ask = FALSE,
       plot = FALSE) |> 
  wrap_plots() &
  scale_y_log10()
```

## fit data to model

```{r}
#| cache: true
abun50m_mod <- update(abun50m_prior_mod,
                  sample_prior = "yes",
                    iter = 10000,
                    warmup = 2000,
                    refresh = 2000)
```

### chain checks

```{r}
# trace
abun50m_mod |> mcmc_plot(type = "trace")
# autocor
abun50m_mod |> mcmc_plot(type = "acf_bar")
# rhat
abun50m_mod |> mcmc_plot(type = "rhat_hist")
# ess
abun50m_mod |> mcmc_plot(type = "neff_hist")
```

### residuals checks

```{r}
# resids
abun50m_resids <- make_brms_dharma_res(abun50m_mod)
# qqplot
abun50m_resids |> testUniformity()
# resid plot
abun50m_resids |> plotResiduals() 
# dispersion
abun50m_resids |> testDispersion()
```

#### save model

```{r}
save(abun50m_mod, file = "Model_Outputs/abun50m_mod.Rdata")
```

### end

