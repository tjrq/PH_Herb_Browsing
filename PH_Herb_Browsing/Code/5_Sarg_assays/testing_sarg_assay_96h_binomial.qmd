---
title: "Sarg_assay_fit"
format: html
editor: visual
---

# read csv

```{r}
sarg_assay <- read_csv("Data/sarg_assays.csv",
               trim_ws = TRUE)

glimpse(sarg_assay)
```

# data prep: 96h deployment

```{r}
sarg_assay_96h <- 
  sarg_assay |> 
  filter(Hours_deployed == "96") |> 
  select(Site,
         Depth_band,
         Treatment,
         Initial_weight_g,
         Final_weight_g,
         Weight_removed_g) |> 
  mutate(Site = factor(Site),
         Depth_band = factor(Depth_band)) |> 
  mutate(Depth_band = recode(Depth_band,
                             "10" = "10m",
                             "20" = "20m",
                             "30" = "30m",
                             "50" = "50m"))
```

# eda data distribution

## histogram of percentage change

```{r}
sarg_assay_96h |> 
  mutate(Percentage = Weight_removed_g / Initial_weight_g * 100) |> 
  ggplot(aes(Percentage)) +
  geom_histogram()
```

## boxplot comparing depth band and treatment

```{r}
sarg_assay |> 
  mutate(Depth_band = factor(Depth_band)) |> 
  ggplot(aes(x = Depth_band, y = Weight_removed_g / Initial_weight_g * 100, fill = Treatment)) +
  geom_boxplot()
```

# model form: binomial

```{r}
sarg_96h_form <- bf(Weight_removed_g | trials(Initial_weight_g) ~ 
                      Depth_band *
                      Treatment +
                      (1 | Site),
                    family = binomial(link = "logit"))
```

# examine data

```{r}
sarg_assay_96h |> 
  group_by(Depth_band) |> 
  summarise(med = median(qlogis(Weight_removed_g / Initial_weight_g)),
            mad = mad(qlogis(Weight_removed_g / Initial_weight_g)),
            N = mean(Initial_weight_g),
            max = max(Initial_weight_g))
```

# get prior

```{r}
get_prior(sarg_96h_form, data = sarg_assay_96h)
# b, intercept, sd
```

# define priors

```{r}
prior_sarg_assay_96h <- prior(normal(1, 2.4), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 2.4), class = "sd")
```

# prior model

```{r}
#| cache: true
sarg96_prior_mod <- brm(sarg_96h_form ,
                    data = sarg_assay_96h,
                    prior = prior_sarg_assay_96h,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

# fit data to model

```{r}
#| cache: true
sarg96_mod <- update(sarg96_prior_mod,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# chain diagnostics

```{r}
# trace
sarg96_mod |> mcmc_plot(type = "trace")
# autocor
sarg96_mod |> mcmc_plot(type = "acf_bar")
# rhat
sarg96_mod |> mcmc_plot(type = "rhat_hist")
# ess
sarg96_mod |> mcmc_plot(type = "neff_hist")
```

# residuals

```{r}
sarg96_resids <- make_brms_dharma_res(sarg96_mod)
# qqplot
sarg96_resids  |> testUniformity() # normality off
# residual plot
sarg96_resids |> plotResiduals(quantreg = FALSE)
```

# summary table

```{r}
sarg96_mod |>  
  as_draws_df() |> 
  dplyr::select(matches("^b_.*")) |>
  exp() |> 
  summarise_draws(median,
                  HDInterval::hdi,
                  Pl= ~mean(.x < 1),
                  Pg = ~mean(.x > 1))
```

# Plot in percentage

```{r}
p_test_binom <- 
sarg96_mod|> 
emmeans(~ Depth_band *
          Treatment,
        type = "link") |> 
  gather_emmeans_draws() |> 
  mutate(prob = plogis(.value),
         percentage = prob * 100) |> 
  dplyr::select(-.chain,
                -.iteration,
                -.draw,
                -.value) |> 
  summarise_draws(median,
                  HDInterval::hdi,
                  Pl = ~mean(.x < 1),
                  Pg = ~mean(.x > 1)) |> 
  filter(variable == "percentage") |> 
  ggplot(aes(x = Depth_band,
             y = median,
             fill = Treatment)) +
  geom_pointrange(aes(ymin = lower, 
                      ymax = upper),
                  position = position_dodge(0.25),
                  shape = 21,
                  size = 1,
                  fatten = 3) +
  scale_y_continuous(limits = c(0,100),
                     breaks = seq(0, 100, by = 20)) +
  theme_classic() +
  ggtitle("Binomial")
```

# Pairwise

```{r}
#coral_mod_pairs <- 
sarg96_mod|> 
emmeans(~ Depth_band *
          Treatment,
        type = "link") |>
  pairs() |> 
  gather_emmeans_draws() |> # log-odds ratio
  mutate(.value = exp(.value)) |>    
  summarise(median_hdci(.value),
            Pl = mean(.value < 1),
            Pg = mean(.value > 1)) #,
            #.width = c(0.85, 0.95))
```

# beta binomial model

```{r}
bb_sarg_96h_form <- bf(Weight_removed_g | trials(Initial_weight_g) ~ 
                      Depth_band *
                      Treatment +
                      (1 | Site),
                    family = beta_binomial(link = "logit"))
```

# get prior

```{r}
get_prior(bb_sarg_96h_form, data = sarg_assay_96h)
# b, intercept, sd, phi (gamma 0.01, 0.01)
```

# define priors

```{r}
bb_prior_sarg_assay_96h <- prior(normal(1, 2.4), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 2.4), class = "sd") +
  prior(gamma(0.01, 0.01), class = "phi")
```

# prior model

```{r}
#| cache: true
bb_sarg96_prior_mod <- brm(bb_sarg_96h_form,
                    data = sarg_assay_96h,
                    prior = bb_prior_sarg_assay_96h,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

# fit data to model

```{r}
#| cache: true
bb_sarg96_mod <- update(bb_sarg96_prior_mod,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# chain checks

```{r}
# trace
bb_sarg96_mod |> mcmc_plot(type = "trace")
# autocor
bb_sarg96_mod |> mcmc_plot(type = "acf_bar")
# rhat
bb_sarg96_mod |> mcmc_plot(type = "rhat_hist")
# ess
bb_sarg96_mod |> mcmc_plot(type = "neff_hist")
```

# residuals

```{r}
bb_sarg96_resids <- make_brms_dharma_res(bb_sarg96_mod)
# qqplot
bb_sarg96_resids  |> testUniformity() # normality good
# residual plot
bb_sarg96_resids |> plotResiduals()
```

# plot beta binom model

```{r}
p_test_betabinom <- 
bb_sarg96_mod |> 
emmeans(~ Depth_band *
          Treatment,
        type = "link") |> 
  gather_emmeans_draws() |> 
  mutate(prob = plogis(.value),
         percentage = prob * 100) |> 
  dplyr::select(-.chain,
                -.iteration,
                -.draw,
                -.value) |> 
  summarise_draws(median,
                  HDInterval::hdi,
                  Pl = ~mean(.x < 1),
                  Pg = ~mean(.x > 1)) |> 
  filter(variable == "percentage") |> 
  ggplot(aes(x = Depth_band,
             y = median,
             fill = Treatment)) +
  geom_pointrange(aes(ymin = lower, 
                      ymax = upper),
                  position = position_dodge(0.25),
                  shape = 21,
                  size = 1,
                  fatten = 3) +
  scale_y_continuous(limits = c(0,100),
                     breaks = seq(0, 100, by = 20)) +
  theme_classic() +
  ggtitle("Beta-Binomial")
```

# compare plots

```{r}
p_test_binom + p_test_betabinom
```

# Pairwise

```{r}
#coral_mod_pairs <- 
bb_sarg96_mod|> 
emmeans(~ Depth_band *
          Treatment,
        type = "link") |>
  pairs() |> 
  gather_emmeans_draws() |> # log-odds ratio
  mutate(.value = exp(.value)) |>    
  summarise(median_hdci(.value),
            Pl = mean(.value < 1),
            Pg = mean(.value > 1)) #,
            #.width = c(0.85, 0.95))
```