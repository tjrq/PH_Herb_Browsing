---
title: "testing_bites_fits"
format: html
editor: visual
---

# NASO SPECIES

# define formula (hurdle negbinomial)

```{r}
naso_bites_form_hurd <- bf(Bites ~ 
                      Depth_band *
                        Species + 
                      (1 | Site),
                    family = hurdle_negbinomial(link = "log"))
```

# define priors

```{r}
naso_bites_prior_hurd <- prior(normal(4.8, 5.6), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 5.6), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape") +
  prior(beta(1, 1), class = "hu")
```

# prior model

```{r}
#| cache: true
naso_prior_mod_hurd <- brm(naso_bites_form_hurd,
                    data = bites_naso,
                    prior = naso_bites_prior_hurd,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

```{r}
naso_prior_mod_hurd |> conditional_effects() |> 
  plot(points = TRUE,
       ask = FALSE,
       plot = FALSE) |> 
  wrap_plots()  #&
  #scale_y_log10()
```

# fit data to model

```{r}
#| cache: true
naso_mod_hurdle <- update(naso_prior_mod_hurd,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# summary: all browsers

```{r}
naso_mod_hurdle |>  
  as_draws_df() |> 
  dplyr::select(matches("^b_.*")) |>
  exp() |> 
  summarise_draws(median,
                  HDInterval::hdi,
                  Pl= ~mean(.x < 1),
                  Pg = ~mean(.x > 1))
```

# pairwise

```{r}

```


# posterior-prior check

```{r}
SUYR_prior_and_posterior(naso_mod_hurdle)
```


# chain checks

```{r}
# trace
naso_mod_hurdle |> mcmc_plot(type = "trace")
# autocor
naso_mod_hurdle|> mcmc_plot(type = "acf_bar")
# rhat
naso_mod_hurdle |> mcmc_plot(type = "rhat_hist")
# ess
naso_mod_hurdle |> mcmc_plot(type = "neff_hist")
```

# residuals


```{r}
naso_resids_hurd <- make_brms_dharma_res(naso_mod_hurdle)
# qqplot
naso_resids_hurd |> testUniformity() 
# residual plot
naso_resids_hurd |> plotResiduals()
```


# ALL BITES HURDLE NEGBINOMIAL

# define formula

```{r}
all_bites_form_hurdle <- bf(Bites ~ 
                      Depth_band +  
                      (1 | Site),
                    family = hurdle_negbinomial())
```

# examine data

```{r}
bites_brow |> 
  group_by(Depth_band) |> 
  summarise(med = log(median(Bites)),
            mad = log(mad(Bites)))
```

# define priors

```{r}
all_bites_prior_hurdle <- prior(normal(1.9, 2.4), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 2.4), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape") +
  prior(beta(1, 1), class = "hu")
```


# prior model

```{r}
#| cache: true
all_brow_prior_mod_hurdle <- brm(all_bites_form_hurdle,
                    data = bites_brow,
                    prior = all_bites_prior_hurdle,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

# fit data to model

```{r}
#| cache: true
all_brow_mod_hurdle <- update(all_brow_prior_mod_hurdle,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# chain checks

```{r}
# trace
all_brow_mod_hurdle |> mcmc_plot(type = "trace")
# autocor
all_brow_mod_hurdle |> mcmc_plot(type = "acf_bar")
# rhat
all_brow_mod_hurdle |> mcmc_plot(type = "rhat_hist")
# ess
all_brow_mod_hurdle |> mcmc_plot(type = "neff_hist")
```

# residuals

```{r}
all_brow_resids_hurdle <- make_brms_dharma_res(all_brow_mod_hurdle)
# qqplot
all_brow_resids_hurdle |> testUniformity() 
# residual plot
all_brow_resids_hurdle |> plotResiduals()
```


# ALL BITES NEGBINOMIAL

# prepare data 

```{r}
bites_brow <- 
  bites |> 
  filter(Functional_group == "Browser") |> 
  select(Site,
         Depth_band,
         Species,
         Bites) |> 
  mutate(Site = factor(Site),
         Depth_band = factor(Depth_band),
         Species = factor(Species)) |> 
  mutate(Depth_band = recode(Depth_band,
                             "10" = "10m",
                             "20" = "20m",
                             "30" = "30m",
                             "50" = "50m")) |> 
  mutate(Bites = replace_na(Bites, 0)) # there are some NAs so replace them with 0
```

# eda

```{r}
bites_brow |> 
  group_by(Depth_band) |> 
  summarise(mean = mean(Bites))

glimpse(bites_brow)
```

# define formula

```{r}
all_bites_form <- bf(Bites ~ 
                      Depth_band +  
                      (1 | Site),
                    family = negbinomial())
```

# get prior

```{r}
get_prior(all_bites_form, data = bites_brow)
# b, intercept, sd, shape (gamma 0.01, 0.01)
```

# examine data

```{r}
bites_brow |> 
  group_by(Depth_band) |> 
  summarise(med = log(median(Bites)),
            mad = log(mad(Bites)))

# 1.9, 2.3
# 1
```


# define priors

```{r}
all_bites_prior <- prior(normal(1.9, 2.3), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 2.3), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape")
```


# prior model

```{r}
#| cache: true
all_brow_prior_mod <- brm(all_bites_form,
                    data = bites_brow,
                    prior = all_bites_prior,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

# eval prior mod

```{r}
all_brow_prior_mod |> conditional_effects() |> 
  plot(points = TRUE,
       ask = FALSE,
       plot = FALSE) |> 
  wrap_plots() # &
  scale_y_log10()
```

# fit data to model

```{r}
#| cache: true
all_brow_mod <- update(all_brow_prior_mod,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# chain checks

```{r}
# trace
all_brow_mod |> mcmc_plot(type = "trace")
# autocor
all_brow_mod |> mcmc_plot(type = "acf_bar")
# rhat
all_brow_mod |> mcmc_plot(type = "rhat_hist")
# ess
all_brow_mod |> mcmc_plot(type = "neff_hist")
```

# residuals

```{r}
all_brow_resids <- make_brms_dharma_res(all_brow_mod)
# qqplot
all_brow_resids  |> testUniformity() 
# residual plot
all_brow_resids |> plotResiduals()
```

# NASO LITURATUS

# prepare data 

```{r}
bites_nl <- 
  bites |> 
  filter(Functional_group == "Browser") |>
  filter(Epithet == "lituratus") |> 
  select(Site,
         Depth_band,
         Species,
         Bites) |> 
  mutate(Site = factor(Site),
         Depth_band = factor(Depth_band),
         Species = factor(Species)) |> 
  mutate(Depth_band = recode(Depth_band,
                             "10" = "10m",
                             "20" = "20m",
                             "30" = "30m",
                             "50" = "50m")) |> 
  mutate(Bites = replace_na(Bites, 0)) # there are some NAs so replace them with 0
```

# eda

```{r}
bites_nl |> 
  group_by(Depth_band) |> 
  summarise(mean = mean(Bites))

#glimpse(bites_nl)
#no bites for N. lituratus at 30m
```

# define formula (hurdle negbinomial)

```{r}
nl_bites_form_hurd <- bf(Bites ~ 
                      Depth_band +  
                      (1 | Site),
                    family = hurdle_negbinomial(link = "log"))
```

Used hurdle model cause negbinomial and zero inflation negative binomial fits werent that good

# get prior

```{r}
get_prior(nl_bites_form_hurd, data = bites_nl)
# b, intercept, sd, shape, hu
```

# define priors

```{r}
nl_bites_prior_hurd <- prior(normal(1.6, 2), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 2), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape") +
  prior(beta(1, 1), class = "hu")
```

# prior model

```{r}
#| cache: true
nl_prior_mod_hurd <- brm(nl_bites_form_hurd,
                    data = bites_nl,
                    prior = nl_bites_prior_hurd,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```


# fit data to model

```{r}
#| cache: true
nl_mod_hurdle <- update(nl_prior_mod_hurd,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# chain checks

```{r}
# trace
nl_mod_hurdle |> mcmc_plot(type = "trace")
# autocor
nl_mod_hurdle |> mcmc_plot(type = "acf_bar")
# rhat
nl_mod_hurdle |> mcmc_plot(type = "rhat_hist")
# ess
nl_mod_hurdle |> mcmc_plot(type = "neff_hist")
```

# residuals

```{r}
nl_resids_hurd <- make_brms_dharma_res(nl_mod_hurdle)
# qqplot
nl_resids_hurd |> testUniformity() 
# residual plot
nl_resids_hurd |> plotResiduals()
```

# NASO UNICORNIS

# prepare data 

```{r}
bites_nu <- 
  bites |> 
  filter(Functional_group == "Browser") |>
  filter(Epithet == "unicornis") |> 
  select(Site,
         Depth_band,
         Species,
         Bites) |> 
  mutate(Site = factor(Site),
         Depth_band = factor(Depth_band),
         Species = factor(Species)) |> 
  mutate(Depth_band = recode(Depth_band,
                             "10" = "10m",
                             "20" = "20m",
                             "30" = "30m",
                             "50" = "50m")) |> 
  mutate(Bites = replace_na(Bites, 0)) # there are some NAs so replace them with 0
```

# eda

```{r}
bites_nu |> 
  group_by(Depth_band) |> 
  summarise(mean = mean(Bites))

#View(bites_nu)
#glimpse(bites_nl)
#no bites for N. unicornis at 20m
```

# define formula (hurdle negbinomial)

```{r}
nu_bites_form_hurd <- bf(Bites ~ 
                      Depth_band +  
                      (1 | Site),
                    family = hurdle_negbinomial(link = "log"))
```

# examine data


```{r}
bites_nu |> 
  group_by(Depth_band) |> 
  summarise(med = log(median(Bites)),
            mad = log(mad(Bites)))

# 1.6, 2
# 1
```

# define priors

```{r}
nu_bites_prior_hurd <- prior(normal(1.6, 2), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 2), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape") +
  prior(beta(1, 1), class = "hu")
```

# prior model

```{r}
#| cache: true
nu_prior_mod_hurd <- brm(nu_bites_form_hurd,
                    data = bites_nu,
                    prior = nu_bites_prior_hurd,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

# fit data to model

```{r}
#| cache: true
nu_mod_hurdle <- update(nu_prior_mod_hurd,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# chain checks

```{r}
# trace
nu_mod_hurdle |> mcmc_plot(type = "trace")
# autocor
nu_mod_hurdle |> mcmc_plot(type = "acf_bar")
# rhat
nu_mod_hurdle |> mcmc_plot(type = "rhat_hist")
# ess
nu_mod_hurdle |> mcmc_plot(type = "neff_hist")
```

# residuals

```{r}
nu_resids_hurd <- make_brms_dharma_res(nu_mod_hurdle)
# qqplot
nu_resids_hurd  |> testUniformity() 
# residual plot
nu_resids_hurd |> plotResiduals()
```

# summary for Naso

```{r}
naso_mod_hurdle|>  
  as_draws_df() |> 
  dplyr::select(matches("^b_.*")) |>
  exp() |> 
  summarise_draws(median,
                  HDInterval::hdi,
                  Pl= ~mean(.x < 1),
                  Pg = ~mean(.x > 1))
```

### 

# summary: Naso lituratus

```{r}
nl_mod_hurdle |>  
  as_draws_df() |> 
  dplyr::select(matches("^b_.*")) |>
  exp() |> 
  summarise_draws(median,
                  HDInterval::hdi,
                  Pl= ~mean(.x < 1),
                  Pg = ~mean(.x > 1))
```

# newdata for N. lituratus

```{r}
nl_nd <- 
  nl_mod_hurdle |> 
  emmeans(~ Depth_band, 
          type = "link") |> 
  gather_emmeans_draws() |> 
  mutate(Exp_bites = exp(.value)) |> 
  dplyr::select(-.chain,
                -.iteration,
                -.value) |> 
  summarise_draws(median, 
                  HDInterval::hdi) |> 
  as.data.frame()
```

# create 30m with zero values because Nl doesnt have values at 30m

```{r}
nl_nd <- 
nl_nd |> 
  add_row(Depth_band = "30m", 
          variable = "Exp_bites", 
          median = 0, 
          lower = 0, 
          upper = 0,
          .before = 3) |> 
  mutate(Depth_band = factor(Depth_band))
```


# plot: Naso lituratus

```{r}
#p_brow_length <- 
nl_nd |> 
  ggplot(aes(x = Depth_band,
             y = median)) +
  geom_pointrange(aes(ymin = lower,
                      ymax = upper),
                  shape = 21,
                  size = 1,
                  fatten = 3,
                  color = "#DDD487",
                  fill = "#DDD487") +
  scale_y_continuous(name = "Number of bites (3h)",
                     limits = c(0, 200),
                     breaks = seq(0, 200, by = 50)) +
  #scale_x_discrete(name = "") +
  theme_classic() +
    ggtitle(expression(italic(Naso~lituratus))) +
     theme(axis.title.x = element_blank(),
           axis.text.x = element_blank(),
           axis.ticks.x = element_blank(),
        axis.title.y = element_text(size = 15),
        axis.text.y = element_text(size = 12),
        plot.title = element_text(size = 18))
```

# summary: Naso unicornis

```{r}
nu_mod_hurdle |>  
  as_draws_df() |> 
  dplyr::select(matches("^b_.*")) |>
  exp() |> 
  summarise_draws(median,
                  HDInterval::hdi,
                  Pl= ~mean(.x < 1),
                  Pg = ~mean(.x > 1))
```

# newdata for all browsers

```{r}
nu_mod_hurdle <- 
  all_brow_mod |> 
  emmeans(~ Depth_band, 
          type = "link") |> 
  gather_emmeans_draws() |> 
  mutate(Exp_bites = exp(.value)) |> 
  dplyr::select(-.chain,
                -.iteration,
                -.value) |> 
  summarise_draws(median, 
                  HDInterval::hdi) |> 
  as.data.frame()
```

###

# MODELS BELOW ARE NOT USED

# define formula (zero inflated negbinomial; not that better from negbinomial)

```{r}
nl_bites_form_zi <- bf(Bites ~ 
                      Depth_band +  
                      (1 | Site),
                    family = zero_inflated_negbinomial(link = "log"))
```

# get prior

```{r}
get_prior(nl_bites_form_zi, data = bites_nl)
# b, intercept, sd, shape, zi
```

# define priors

```{r}
nl_bites_prior_zi <- prior(normal(1.6, 2), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 2), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape") +
  prior(logistic(0, 1), class = "zi")
```

# prior model

```{r}
#| cache: true
nl_prior_mod_zi <- brm(nl_bites_form_zi,
                    data = bites_nl,
                    prior = nl_bites_prior_zi,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

# fit data to model

```{r}
#| cache: true
nl_mod_zi <- update(nl_prior_mod_zi,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# chain checks

```{r}
# trace
nl_mod_zi |> mcmc_plot(type = "trace")
# autocor
nl_mod_zi |> mcmc_plot(type = "acf_bar")
# rhat
nl_mod_zi |> mcmc_plot(type = "rhat_hist")
# ess
nl_mod_zi |> mcmc_plot(type = "neff_hist")
```

# residuals

```{r}
nl_resids_zi <- make_brms_dharma_res(nl_mod_zi)
# qqplot
nl_resids_zi |> testUniformity() 
# residual plot
nl_resids_zi |> plotResiduals()
```

# define formula (negative binomial): residuals are bad

```{r}
nl_bites_form <- bf(Bites ~ 
                      Depth_band +  
                      (1 | Site),
                    family = negbinomial())
```

# examine data

```{r}
bites_nl |> 
  group_by(Depth_band) |> 
  summarise(med = log(median(Bites)),
            mad = log(mad(Bites)))

# 1.6, 2
# 1
```

# define priors

```{r}
nl_bites_prior <- prior(normal(1.6, 2), class = "Intercept") +
  prior(normal(0, 1), class = "b") +
  prior(student_t(3, 0, 2), class = "sd") +
  prior(gamma(0.01, 0.01), class = "shape")
```


# prior model

```{r}
#| cache: true
nl_prior_mod <- brm(nl_bites_form,
                    data = bites_nl,
                    prior = nl_bites_prior,
                    sample_prior = "only",
                    iter = 5000,
                    warmup = 1000,
                    chains = 3,
                    cores = 6,
                    thin = 5,
                    refresh = 1000,
                    control = list(adapt_delta = 0.99,
                                   max_treedepth = 20))
```

# eval prior mod

```{r}
nl_prior_mod |> conditional_effects() |> 
  plot(points = TRUE,
       ask = FALSE,
       plot = FALSE) |> 
  wrap_plots() # &
  scale_y_log10()
```

# fit data to model

```{r}
#| cache: true
nl_mod <- update(nl_prior_mod,
                   sample_prior = "yes",
                   iter = 10000,
                   warmup = 2000,
                   refresh = 1000)
```

# chain checks

```{r}
# trace
nl_mod |> mcmc_plot(type = "trace")
# autocor
nl_mod |> mcmc_plot(type = "acf_bar")
# rhat
nl_mod |> mcmc_plot(type = "rhat_hist")
# ess
nl_mod|> mcmc_plot(type = "neff_hist")
```

# residuals

```{r}
nl_resids <- make_brms_dharma_res(nl_mod)
# qqplot
nl_resids |> testUniformity() 
# residual plot
nl_resids |> plotResiduals()
```


